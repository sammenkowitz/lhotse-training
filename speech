# Shalom World

import lhotse, os, gzip, shutil
from lhotse import CutSet, Mfcc, Fbank
import lhotse.recipes
from lhotse.audio import Recording, RecordingSet
from lhotse.recipes.utils import manifests_exist, read_manifests_if_cached
from lhotse.supervision import AlignmentItem, SupervisionSegment, SupervisionSet

from tqdm.auto import tqdm
from pathlib import Path
from typing import Dict, List, Optional, Sequence, Tuple, Union

Pathlike = Union[Path, str]

def prepare_corpora(root_dir, out_dir = None, sessions = None):
    
    
    '''
    root_dir = train:
        annotationdir:
            'C:...\\annotation_and_speech_corpora\\train\\annotation\\fla_0001.txt'
            'C:...\\annotation_and_speech_corpora\\train\\annotation\\fla_0007.txt'
            'C:...\\annotation_and_speech_corpora\\train\\annotation\\fla_0013.txt'
        audiodir:
            'C:...\\annotation_and_speech_corpora\\train\\audio\\fla_0001.sph'
            'C:...\\annotation_and_speech_corpora\\train\\audio\\fla_0007.sph'
            'C:...\\annotation_and_speech_corpora\\train\\audio\\fla_0013.sph'
    out_dir = train:    
        supervisionsdir:
            'C:...\\annotation_and_speech_corpora\\train\\supervisions\\supervision'
            'C:...\\annotation_and_speech_corpora\\train\\supervisions\\recording'
    '''
    
    
    # out_dir defaults to root_dir
    if out_dir == None:
        out_dir = root_dir
    else:
        assert out_dir.is_dir(), f"No such directory: {out_dir}"
    
    root_dir = Path(root_dir)
    assert root_dir.is_dir(), f"No such directory: {root_dir}"
    out_dir = Path(out_dir)
    
    # dir is full path
    annotationdir = os.path.join(root_dir,'annotation')
    audiodir = os.path.join(root_dir,'audio')
    supervisionsdir = Path(os.path.join(out_dir,'supervisons'))
    if not supervisionsdir.is_dir():
        os.mkdir(supervisionsdir)

    # channel_to_int = {"A": 0, "B": 1}
    session_id = root_dir.stem.split("_")[-1]
        
    with open(os.path.join(supervisionsdir,'supervison'), 'w', encoding='utf-8') as prime_manifest:
        with open(os.path.join(supervisionsdir,'recording'), 'w') as vice_manifest:

            for annotation in os.listdir(annotationdir): # iterates through annotation files
                annotation = os.path.join(annotationdir, annotation)
                for audio in os.listdir(audiodir): # iterates through audio files
                    audio = os.path.join(audiodir, audio)
                
                with open(annotation, 'r', encoding='utf-8') as annotation_data:
                    sub = 0
                    for line in annotation_data.read().split('\n'): # iterates through cuts in annotation
                        if line != '':
                            line = line.split('\t')
                            line[0] = line[0].split(' ')
                                                        
                            supervision = {}
                            supervision['id'] = Path(annotation).stem + f"-cut_{sub}"
                            supervision['recording_id'] = Path(audio).stem
                            supervision['start'] = float(line[0][0])
                            supervision['duration'] = round(float(line[0][1]) - float(line[0][0]), 3)
                            supervision['channel'] = "B" if line[0][2] else "A"
                            supervision['text'] = line[1]
                            supervision['text_english'] = line[2]
                            supervision['language'] = 'Arabic'
                            supervision['speaker'] = sessions[session_id][line[2]] if sessions else line[0][2]
                            prime_manifest.write(str(supervision))

                            sub += 1
                    
                    recording = {}
                    recording['id'] = Path(audio).stem
                    recording['sources'] = {}
                    recording['sources']['type'] = 'file'
                    recording['sources']['channels'] = []
                    recording['sources']['source'] = str(audio)
                    recording['sampling_rate'] = None
                    recording['num_samples'] = None
                    recording['duration'] = 20.23 # this is the duration of the sph file
                    vice_manifest.write(str(recording))
